from loader import dp, bot
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.inline.choice_buttons import *
from keyboards.reply.choice_buttons import *
from utils import TestStates
from data import db
from data.api import activate, qiwi, smshub
from config import ADMIN


lib = globals()["smshub"]
global services
services = lib.smshub
global users
users = {}


@dp.message_handler(Command('start'))  # –ù–∞—á–∞–ª–æ –Ω–∞—á–∞–ª
async def start_command(message):
    db.user_create(message.chat.id)
    await bot.send_message(  
        message.chat.id,  
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å üëë,\n' +  
        '–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏üïû ',
        reply_markup=menu() 
                    )
    await bot.send_message(message.chat.id, '–í–ê–ñ–ù–û!\n–¶–µ–Ω—ã –≤ –±–æ—Ç–µ –Ω–µ –ø–æ—Å—Ç–æ—è–Ω—ã! \n–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –º–æ–∂–µ—Ç —Ä–µ–∑–∫–æ —É–ø–∞—Å—Ç—å –∏–ª–∏ –ø–ª–∞–≤–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è', reply_markup=menu())


@dp.message_handler(Command('cupon'))
async def cupon(message):
    if message.chat.id == ADMIN:
        l = list(map(str, message.text.split()))
        if len(l) != 2:
            await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É /cupon —Ü–µ–Ω–∞")
        else:
            await bot.send_message(message.chat.id, "–ö—É–ø–æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—å—Å—è...")
            cupon = db.get_cupon(l[1])
            await bot.send_message(message.chat.id, cupon)


@dp.message_handler(Command('info'))
async def info(message):
    if message.chat.id == ADMIN:
        await bot.send_message(message.chat.id, db.info(), reply_markup=menu())


@dp.message_handler(Command('send'))
async def send(message):
    if message.chat.id == ADMIN:
        await bot.send_message(ADMIN, "–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞=")
        s = message.text[5:]
        users = db.get_users()
        print(users)
        came = 0
        notcame = 0
        for user in users:
            try:
                await bot.send_message(user, s, reply_markup=tomenu())
                came += 1
                print(1)
            except:
                notcame += 1
        print(came, notcame)
        s = "–î–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–æ—à–ª–∞ –¥–æ " + str(came) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ù–µ–¥–æ—à–ª–∞ –¥–æ " + str(notcame) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        await bot.send_message(ADMIN, s)


@dp.message_handler(Command('admin'))
async def admin(message):
    if message.chat.id == ADMIN:
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥—ã\n/cupon —Ü–µ–Ω–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞\n/info - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/send text - —Ä–∞—Å—Å—ã–ª–∫–∞")


@dp.callback_query_handler(lambda call: call.data.isdigit())
async def check_button(call: CallbackQuery):
    comments = qiwi.get_comments()
    if call.data in list(comments.keys()):
        cash = comments[call.data]
        db.replenishment(call.message.chat.id, cash)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        s = ""
        try:
            s = "@" + str(call.message.chat.username)
        except:
            try:
                s += call.message.chat.first_name
            except:
                pass
            try:
                s += call.message.chat.last_name
            except:
                pass
        await bot.send_message(ADMIN, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É {} —Ä—É–±.\nID: {}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}".format(cash, call.message.chat.id, s))
    else:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞", reply_markup=cash_check(call.data))


@dp.callback_query_handler(lambda call: call.data == "–ó–∞–∫–æ–Ω—á–∏—Ç—å")
async def end_number(call: CallbackQuery):
    global users
    number = users[str(call.message.chat.id)]['number']
    number.edit_status(6)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞", reply_markup=menu())


@dp.callback_query_handler(lambda call: call.data == "–ï—â—ë —Å–º—Å")
async def end_number(call: CallbackQuery):
    global users
    number = users[str(call.message.chat.id)]['number']
    number.edit_status(3)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ –µ—â—ë –æ–¥–Ω–æ–≥–æ —Å–º—Å", reply_markup=number_end())
    s = await number.get_sms()
    print(s)
    if s == '–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞':
        number.edit_status(6)
        await bot.delete_message(call.message.chat.id, call.message.message_id + 1)
    else:
        await bot.delete_message(call.message.chat.id, call.message.message_id + 1)
        await call.message.answer("–í–∞—à –∫–æ–¥: ```" + str(s) + '```\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=number_sms(), parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel(call: CallbackQuery):
    number = users[str(call.message.chat.id)]['number']
    number.edit_status(8)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=menu())


@dp.callback_query_handler(lambda call: call.data == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def gotomenu(call: CallbackQuery):
    await call.message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=menu())


@dp.callback_query_handler(lambda call: call.data in services.keys())
async def service_btn(call: CallbackQuery):
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=web())
    global users
    choice = call.data
    users[str(call.message.chat.id)] = {'choice': choice}


@dp.callback_query_handler(lambda call: call.data in ['sms-hub', "sms-activate"])
async def get_sms(call: CallbackQuery):
    global users
    choice = users[str(call.message.chat.id)]['choice'] # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é choice
    if call.data == 'sms-activate':
        lib = globals()["activate"]
    elif call.data == 'sms-hub':
        lib = globals()["smshub"]
    users[str(call.message.chat.id)]['lib'] = lib
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É', reply_markup=country_btns(lib, services, choice))


@dp.callback_query_handler(lambda call: call.data in ["–†–æ—Å—Å–∏—è", "–£–∫—Ä–∞–∏–Ω–∞", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"])
async def get_number(call: CallbackQuery):
    global users
    choice = users[str(call.message.chat.id)]['choice'] # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é choice
    lib = users[str(call.message.chat.id)]['lib'] # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é lib
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    number = lib.Number(services[choice], call.data)
    users[str(call.message.chat.id)]['number'] = number
    price = lib.get_price(services[choice], call.data)
    if price == "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏":
        await call.message.answer("–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –≤ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ç—É –Ω–æ–º–µ—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ —Å—Ç—Ä–∞–Ω—É, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    elif str(number) and float(price[::-1][2:][::-1]) <= db.get_balance(call.message.chat.id):
        s = '–°–µ—Ä–≤–∏—Å: {}\n–ù–æ–º–µ—Ä:  {}\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å\n\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 4 –º–∏–Ω—É—Ç —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥—ë—Ç, –∞—Ä–µ–Ω–¥–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ—Å–ª–µ –¥–µ–Ω—å–≥–∏, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –∞—Ä–µ–Ω–¥—É –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∫ –≤–∞–º –Ω–∞ —Å—á—ë—Ç'.format(choice, str(number))
        await call.message.answer(s, reply_markup=end_sms())
        s = await number.get_sms()
        print(s)
        if s == '–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞':
            number.edit_status(8)
            await bot.delete_message(call.message.chat.id, call.message.message_id + 1)
        else:
            await bot.delete_message(call.message.chat.id, call.message.message_id + 1)
            db.buy(choice, str(number), call.message.chat.id, float(price[::-1][2:][::-1]))
            await call.message.answer("–í–∞—à –∫–æ–¥: ```" + str(s) + '```\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=number_sms(), parse_mode="Markdown")

    else:
        try:
            number.edit_status(8)
        except:
            pass
        await call.message.answer("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=menu())


@dp.message_handler(state=TestStates.TEST_STATE_1)
async def cupon_activate(message: Message):
    s = db.cupon_activate(message.chat.id,  message.text)
    state = dp.current_state(user=message.from_user.id)
    await state.reset_state()
    await message.answer(s, reply_markup=menu())


@dp.message_handler()
async def echo_message(message: Message):
    s = message.text
    if s == "üî• –ù–æ–º–µ—Ä–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", reply_markup=num())
    elif s == "üÜò –ü—Ä–∞–≤–∏–ª–∞":
        await message.answer("1. –ì–ª–∞–≤–Ω–æ–µ:\n1.1 –ú—ã –ø—Ä–æ–¥–∞–µ–º –Ω–æ–º–µ—Ä–∞, –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—Å.\n1.2 –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–º–µ–Ω—É\n1.3 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ü—Ä–∞–≤–∏–ª–∞, –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!\n1.4 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ–±–Ω—É–ª–∏—Ç—å –≤–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç.\n\n–§–û–†–ú–ê –û–ë–†–ê–©–ï–ù–ò–Ø\n1) –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –±–æ—Ç–æ–º + —Å–∫—Ä–∏–Ω—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏ + —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã\n2) –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Ñ—Ñ.—Å–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª–∏. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –∏ —Ü–µ–ª—å–Ω–æ–µ. ( –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ñ–æ—Ä–º—ã –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!!!", reply_markup=menu())
    elif s == "üí∞ –ë–∞–ª–∞–Ω—Å":
        b = db.get_balance(message.chat.id)
        s = int(b) if int(b) == float(b) else float(b)
        await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(s) + '—Ä.', reply_markup=balance())
    elif s == 'üí© –ü–æ–º–æ—â—å':
        await message.answer('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Iyingien ', reply_markup=menu())
    elif s == "‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©":
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=menu())
    elif s == "üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        lst = db.get_info(message.chat.id)
        print(lst, sum(lst) / 100)
        await message.answer('id: {}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {}—à—Ç. \n–°—É–º–º–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫: {}—Ä.'.format(message.chat.id, len(lst), sum(lst) / 100), reply_markup=menu())
    elif s == 'üéÅ –ö—É–ø–æ–Ω üéÅ':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É–ø–æ–Ω")
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[1])
    elif s == "üí£ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üí£":
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", reply_markup=method_payment())
    elif s == "‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©":
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=menu())
    elif message.text == "ü•ù –ö–∏–≤–∏":
        comment = db.get_comment()
        await message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\nü•ù QIWI-–∫–æ—à–µ–ª–µ–∫: +{}\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ```{}``` \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–í–Ω–∏–º–∞–Ω–∏–µ\n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç—É —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!\n–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –æ—à–∏–±–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –±—É–¥–µ—Ç!\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'!\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ".format(qiwi.NUMBER, comment), parse_mode="Markdown", reply_markup=tomenu())
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã", reply_markup=cash_check(comment))
    elif message.text == '‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©':
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=menu())
    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=menu())